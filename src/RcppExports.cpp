// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// getEkOk_cpp
arma::field<arma::cube> getEkOk_cpp(const arma::cube Sk, const arma::vec ng, const unsigned int G);
RcppExport SEXP _FHclust_getEkOk_cpp(SEXP SkSEXP, SEXP ngSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube >::type Sk(SkSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(getEkOk_cpp(Sk, ng, G));
    return rcpp_result_gen;
END_RCPP
}
// getA_cpp
arma::mat getA_cpp(const arma::cube Ok, const arma::vec lam, const unsigned int G, const unsigned int d);
RcppExport SEXP _FHclust_getA_cpp(SEXP OkSEXP, SEXP lamSEXP, SEXP GSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube >::type Ok(OkSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(getA_cpp(Ok, lam, G, d));
    return rcpp_result_gen;
END_RCPP
}
// sumSk_wt_cpp
arma::mat sumSk_wt_cpp(const arma::cube Sk, const arma::vec wt, const unsigned int d, const unsigned int G);
RcppExport SEXP _FHclust_sumSk_wt_cpp(SEXP SkSEXP, SEXP wtSEXP, SEXP dSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube >::type Sk(SkSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type wt(wtSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type d(dSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(sumSk_wt_cpp(Sk, wt, d, G));
    return rcpp_result_gen;
END_RCPP
}
// newD3_MM_cpp
arma::mat newD3_MM_cpp(const arma::mat D, const unsigned int d, const unsigned int G, const arma::cube Wk, const arma::mat Ak, const unsigned int tmax);
RcppExport SEXP _FHclust_newD3_MM_cpp(SEXP DSEXP, SEXP dSEXP, SEXP GSEXP, SEXP WkSEXP, SEXP AkSEXP, SEXP tmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type d(dSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type Wk(WkSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Ak(AkSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type tmax(tmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(newD3_MM_cpp(D, d, G, Wk, Ak, tmax));
    return rcpp_result_gen;
END_RCPP
}
// newD4_MM_cpp
arma::mat newD4_MM_cpp(const arma::mat D, const unsigned int d, const unsigned int G, const arma::cube Wk, const arma::mat Ak, const unsigned int tmax);
RcppExport SEXP _FHclust_newD4_MM_cpp(SEXP DSEXP, SEXP dSEXP, SEXP GSEXP, SEXP WkSEXP, SEXP AkSEXP, SEXP tmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type d(dSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type Wk(WkSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Ak(AkSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type tmax(tmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(newD4_MM_cpp(D, d, G, Wk, Ak, tmax));
    return rcpp_result_gen;
END_RCPP
}
// newD_cpp
arma::mat newD_cpp(const arma::mat D, const unsigned int d, const unsigned int G, const arma::cube Wk, const arma::mat Ak, const unsigned int tmax);
RcppExport SEXP _FHclust_newD_cpp(SEXP DSEXP, SEXP dSEXP, SEXP GSEXP, SEXP WkSEXP, SEXP AkSEXP, SEXP tmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type d(dSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type Wk(WkSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Ak(AkSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type tmax(tmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(newD_cpp(D, d, G, Wk, Ak, tmax));
    return rcpp_result_gen;
END_RCPP
}
// testval_cpp
double testval_cpp(const arma::cube Wk, const arma::mat Ak, const arma::mat D, const unsigned int G);
RcppExport SEXP _FHclust_testval_cpp(SEXP WkSEXP, SEXP AkSEXP, SEXP DSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube >::type Wk(WkSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Ak(AkSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(testval_cpp(Wk, Ak, D, G));
    return rcpp_result_gen;
END_RCPP
}
// msEEE_cpp
arma::field<arma::cube> msEEE_cpp(const arma::cube Sk, const arma::vec ng);
RcppExport SEXP _FHclust_msEEE_cpp(SEXP SkSEXP, SEXP ngSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube >::type Sk(SkSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type ng(ngSEXP);
    rcpp_result_gen = Rcpp::wrap(msEEE_cpp(Sk, ng));
    return rcpp_result_gen;
END_RCPP
}
// msEEV_cpp
arma::field<arma::cube> msEEV_cpp(const arma::cube Sk, const arma::vec ng, const double eplison, const unsigned int max_iter);
RcppExport SEXP _FHclust_msEEV_cpp(SEXP SkSEXP, SEXP ngSEXP, SEXP eplisonSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube >::type Sk(SkSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const double >::type eplison(eplisonSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(msEEV_cpp(Sk, ng, eplison, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// msVEV_cpp
arma::field<arma::cube> msVEV_cpp(const arma::cube Sk, const arma::vec ng, const double eplison, const unsigned int max_iter);
RcppExport SEXP _FHclust_msVEV_cpp(SEXP SkSEXP, SEXP ngSEXP, SEXP eplisonSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube >::type Sk(SkSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const double >::type eplison(eplisonSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(msVEV_cpp(Sk, ng, eplison, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// msVVV_cpp
arma::field<arma::cube> msVVV_cpp(const arma::cube Sk, const arma::vec ng);
RcppExport SEXP _FHclust_msVVV_cpp(SEXP SkSEXP, SEXP ngSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube >::type Sk(SkSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type ng(ngSEXP);
    rcpp_result_gen = Rcpp::wrap(msVVV_cpp(Sk, ng));
    return rcpp_result_gen;
END_RCPP
}
// msEEI_cpp
arma::field<arma::cube> msEEI_cpp(const arma::cube Sk, const arma::vec ng);
RcppExport SEXP _FHclust_msEEI_cpp(SEXP SkSEXP, SEXP ngSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube >::type Sk(SkSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type ng(ngSEXP);
    rcpp_result_gen = Rcpp::wrap(msEEI_cpp(Sk, ng));
    return rcpp_result_gen;
END_RCPP
}
// msVEI_cpp
arma::field<arma::cube> msVEI_cpp(const arma::cube Sk, const arma::vec ng, const double eplison, const unsigned int max_iter);
RcppExport SEXP _FHclust_msVEI_cpp(SEXP SkSEXP, SEXP ngSEXP, SEXP eplisonSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube >::type Sk(SkSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const double >::type eplison(eplisonSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(msVEI_cpp(Sk, ng, eplison, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// msEVI_cpp
arma::field<arma::cube> msEVI_cpp(const arma::cube Sk, const arma::vec ng);
RcppExport SEXP _FHclust_msEVI_cpp(SEXP SkSEXP, SEXP ngSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube >::type Sk(SkSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type ng(ngSEXP);
    rcpp_result_gen = Rcpp::wrap(msEVI_cpp(Sk, ng));
    return rcpp_result_gen;
END_RCPP
}
// msVVI_cpp
arma::field<arma::cube> msVVI_cpp(const arma::cube Sk, const arma::vec ng);
RcppExport SEXP _FHclust_msVVI_cpp(SEXP SkSEXP, SEXP ngSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube >::type Sk(SkSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type ng(ngSEXP);
    rcpp_result_gen = Rcpp::wrap(msVVI_cpp(Sk, ng));
    return rcpp_result_gen;
END_RCPP
}
// msEII_cpp
arma::field<arma::cube> msEII_cpp(const arma::cube Sk, const arma::vec ng);
RcppExport SEXP _FHclust_msEII_cpp(SEXP SkSEXP, SEXP ngSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube >::type Sk(SkSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type ng(ngSEXP);
    rcpp_result_gen = Rcpp::wrap(msEII_cpp(Sk, ng));
    return rcpp_result_gen;
END_RCPP
}
// msVII_cpp
arma::field<arma::cube> msVII_cpp(const arma::cube Sk, const arma::vec ng);
RcppExport SEXP _FHclust_msVII_cpp(SEXP SkSEXP, SEXP ngSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube >::type Sk(SkSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type ng(ngSEXP);
    rcpp_result_gen = Rcpp::wrap(msVII_cpp(Sk, ng));
    return rcpp_result_gen;
END_RCPP
}
// msVVE_cpp
arma::field<arma::cube> msVVE_cpp(const arma::cube Sk, const arma::vec ng, const double eplison, const unsigned int max_iter);
RcppExport SEXP _FHclust_msVVE_cpp(SEXP SkSEXP, SEXP ngSEXP, SEXP eplisonSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube >::type Sk(SkSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const double >::type eplison(eplisonSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(msVVE_cpp(Sk, ng, eplison, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// msEVE_cpp
arma::field<arma::cube> msEVE_cpp(const arma::cube Sk, const arma::vec ng, const double eplison, const unsigned int max_iter);
RcppExport SEXP _FHclust_msEVE_cpp(SEXP SkSEXP, SEXP ngSEXP, SEXP eplisonSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube >::type Sk(SkSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const double >::type eplison(eplisonSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(msEVE_cpp(Sk, ng, eplison, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// msVEE_cpp
arma::field<arma::cube> msVEE_cpp(const arma::cube Sk, const arma::vec ng, const double eplison, const unsigned int max_iter);
RcppExport SEXP _FHclust_msVEE_cpp(SEXP SkSEXP, SEXP ngSEXP, SEXP eplisonSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube >::type Sk(SkSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const double >::type eplison(eplisonSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(msVEE_cpp(Sk, ng, eplison, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// msEVV_cpp
arma::field<arma::cube> msEVV_cpp(const arma::cube Sk, const arma::vec ng, const double eplison, const unsigned int max_iter);
RcppExport SEXP _FHclust_msEVV_cpp(SEXP SkSEXP, SEXP ngSEXP, SEXP eplisonSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube >::type Sk(SkSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const double >::type eplison(eplisonSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(msEVV_cpp(Sk, ng, eplison, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// model_type_cpp
arma::field<arma::cube> model_type_cpp(const Rcpp::String modelname, const arma::cube Sk, arma::vec ng, const double mtol, const unsigned int mmax);
RcppExport SEXP _FHclust_model_type_cpp(SEXP modelnameSEXP, SEXP SkSEXP, SEXP ngSEXP, SEXP mtolSEXP, SEXP mmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::String >::type modelname(modelnameSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type Sk(SkSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< const double >::type mtol(mtolSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type mmax(mmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(model_type_cpp(modelname, Sk, ng, mtol, mmax));
    return rcpp_result_gen;
END_RCPP
}
// compose_clusters_fast
void compose_clusters_fast(const unsigned int nF, const unsigned int nH, arma::mat& mu, arma::cube& sigma, arma::cube& sigma_inv, const arma::cube& psi, const arma::mat& alpha);
RcppExport SEXP _FHclust_compose_clusters_fast(SEXP nFSEXP, SEXP nHSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP sigma_invSEXP, SEXP psiSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type nF(nFSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nH(nHSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type sigma_inv(sigma_invSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha(alphaSEXP);
    compose_clusters_fast(nF, nH, mu, sigma, sigma_inv, psi, alpha);
    return R_NilValue;
END_RCPP
}
// draw_multiple
arma::uvec draw_multiple(arma::mat probs);
RcppExport SEXP _FHclust_draw_multiple(SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_multiple(probs));
    return rcpp_result_gen;
END_RCPP
}
// maximization_step_1_fast
void maximization_step_1_fast(const unsigned int nF, const unsigned int nH, arma::mat& mu, arma::cube& sigma, arma::cube& sigma_inv, arma::cube& psi, const arma::mat& alpha, arma::vec& pi, const arma::mat& zhat, const arma::mat& data, const String psi_type, const String cov_type);
RcppExport SEXP _FHclust_maximization_step_1_fast(SEXP nFSEXP, SEXP nHSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP sigma_invSEXP, SEXP psiSEXP, SEXP alphaSEXP, SEXP piSEXP, SEXP zhatSEXP, SEXP dataSEXP, SEXP psi_typeSEXP, SEXP cov_typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type nF(nFSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nH(nHSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type sigma_inv(sigma_invSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type zhat(zhatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const String >::type psi_type(psi_typeSEXP);
    Rcpp::traits::input_parameter< const String >::type cov_type(cov_typeSEXP);
    maximization_step_1_fast(nF, nH, mu, sigma, sigma_inv, psi, alpha, pi, zhat, data, psi_type, cov_type);
    return R_NilValue;
END_RCPP
}
// maximization_step_2_fast
void maximization_step_2_fast(const unsigned int nF, const unsigned int nH, const arma::mat& mu, const arma::cube& sigma, const arma::cube& sigma_inv, const arma::cube& psi, arma::mat& alpha, const arma::vec& pi, const arma::mat& zhat, const arma::mat& data, const arma::mat& Amat, const arma::mat& bvec);
RcppExport SEXP _FHclust_maximization_step_2_fast(SEXP nFSEXP, SEXP nHSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP sigma_invSEXP, SEXP psiSEXP, SEXP alphaSEXP, SEXP piSEXP, SEXP zhatSEXP, SEXP dataSEXP, SEXP AmatSEXP, SEXP bvecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type nF(nFSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nH(nHSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type sigma_inv(sigma_invSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type zhat(zhatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Amat(AmatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type bvec(bvecSEXP);
    maximization_step_2_fast(nF, nH, mu, sigma, sigma_inv, psi, alpha, pi, zhat, data, Amat, bvec);
    return R_NilValue;
END_RCPP
}
// log_phi
arma::vec log_phi(arma::mat x, arma::vec mu, arma::mat sigma);
RcppExport SEXP _FHclust_log_phi(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(log_phi(x, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// log_phi_inv
arma::vec log_phi_inv(arma::mat x, arma::vec mu, arma::mat sigma_inv);
RcppExport SEXP _FHclust_log_phi_inv(SEXP xSEXP, SEXP muSEXP, SEXP sigma_invSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma_inv(sigma_invSEXP);
    rcpp_result_gen = Rcpp::wrap(log_phi_inv(x, mu, sigma_inv));
    return rcpp_result_gen;
END_RCPP
}
// expectation_step_fast
void expectation_step_fast(const unsigned int nF, const unsigned int nH, const arma::mat& mu, const arma::cube& sigma, const arma::cube& sigma_inv, const arma::vec& pi, arma::mat& zhat, const arma::mat& data, const bool& hold_z, const bool& stochastic, double& loglik);
RcppExport SEXP _FHclust_expectation_step_fast(SEXP nFSEXP, SEXP nHSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP sigma_invSEXP, SEXP piSEXP, SEXP zhatSEXP, SEXP dataSEXP, SEXP hold_zSEXP, SEXP stochasticSEXP, SEXP loglikSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type nF(nFSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nH(nHSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type sigma_inv(sigma_invSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type zhat(zhatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const bool& >::type hold_z(hold_zSEXP);
    Rcpp::traits::input_parameter< const bool& >::type stochastic(stochasticSEXP);
    Rcpp::traits::input_parameter< double& >::type loglik(loglikSEXP);
    expectation_step_fast(nF, nH, mu, sigma, sigma_inv, pi, zhat, data, hold_z, stochastic, loglik);
    return R_NilValue;
END_RCPP
}
// cpp_iteration_fast_progress
NumericVector cpp_iteration_fast_progress(Rcpp::List state, const unsigned int times, const unsigned int verbosity, const bool show_progress, const double AECM_epsilon);
RcppExport SEXP _FHclust_cpp_iteration_fast_progress(SEXP stateSEXP, SEXP timesSEXP, SEXP verbositySEXP, SEXP show_progressSEXP, SEXP AECM_epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type state(stateSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbosity(verbositySEXP);
    Rcpp::traits::input_parameter< const bool >::type show_progress(show_progressSEXP);
    Rcpp::traits::input_parameter< const double >::type AECM_epsilon(AECM_epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_iteration_fast_progress(state, times, verbosity, show_progress, AECM_epsilon));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FHclust_getEkOk_cpp", (DL_FUNC) &_FHclust_getEkOk_cpp, 3},
    {"_FHclust_getA_cpp", (DL_FUNC) &_FHclust_getA_cpp, 4},
    {"_FHclust_sumSk_wt_cpp", (DL_FUNC) &_FHclust_sumSk_wt_cpp, 4},
    {"_FHclust_newD3_MM_cpp", (DL_FUNC) &_FHclust_newD3_MM_cpp, 6},
    {"_FHclust_newD4_MM_cpp", (DL_FUNC) &_FHclust_newD4_MM_cpp, 6},
    {"_FHclust_newD_cpp", (DL_FUNC) &_FHclust_newD_cpp, 6},
    {"_FHclust_testval_cpp", (DL_FUNC) &_FHclust_testval_cpp, 4},
    {"_FHclust_msEEE_cpp", (DL_FUNC) &_FHclust_msEEE_cpp, 2},
    {"_FHclust_msEEV_cpp", (DL_FUNC) &_FHclust_msEEV_cpp, 4},
    {"_FHclust_msVEV_cpp", (DL_FUNC) &_FHclust_msVEV_cpp, 4},
    {"_FHclust_msVVV_cpp", (DL_FUNC) &_FHclust_msVVV_cpp, 2},
    {"_FHclust_msEEI_cpp", (DL_FUNC) &_FHclust_msEEI_cpp, 2},
    {"_FHclust_msVEI_cpp", (DL_FUNC) &_FHclust_msVEI_cpp, 4},
    {"_FHclust_msEVI_cpp", (DL_FUNC) &_FHclust_msEVI_cpp, 2},
    {"_FHclust_msVVI_cpp", (DL_FUNC) &_FHclust_msVVI_cpp, 2},
    {"_FHclust_msEII_cpp", (DL_FUNC) &_FHclust_msEII_cpp, 2},
    {"_FHclust_msVII_cpp", (DL_FUNC) &_FHclust_msVII_cpp, 2},
    {"_FHclust_msVVE_cpp", (DL_FUNC) &_FHclust_msVVE_cpp, 4},
    {"_FHclust_msEVE_cpp", (DL_FUNC) &_FHclust_msEVE_cpp, 4},
    {"_FHclust_msVEE_cpp", (DL_FUNC) &_FHclust_msVEE_cpp, 4},
    {"_FHclust_msEVV_cpp", (DL_FUNC) &_FHclust_msEVV_cpp, 4},
    {"_FHclust_model_type_cpp", (DL_FUNC) &_FHclust_model_type_cpp, 5},
    {"_FHclust_compose_clusters_fast", (DL_FUNC) &_FHclust_compose_clusters_fast, 7},
    {"_FHclust_draw_multiple", (DL_FUNC) &_FHclust_draw_multiple, 1},
    {"_FHclust_maximization_step_1_fast", (DL_FUNC) &_FHclust_maximization_step_1_fast, 12},
    {"_FHclust_maximization_step_2_fast", (DL_FUNC) &_FHclust_maximization_step_2_fast, 12},
    {"_FHclust_log_phi", (DL_FUNC) &_FHclust_log_phi, 3},
    {"_FHclust_log_phi_inv", (DL_FUNC) &_FHclust_log_phi_inv, 3},
    {"_FHclust_expectation_step_fast", (DL_FUNC) &_FHclust_expectation_step_fast, 11},
    {"_FHclust_cpp_iteration_fast_progress", (DL_FUNC) &_FHclust_cpp_iteration_fast_progress, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_FHclust(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
